from collections import deque


def bfs(V):
    q = deque([V])
    # print(q)
    visited_BFS[V] = True
    # q가 비어있지 않을 동안 무한 반복
    while q: 
        V = q.popleft() # V에 q의 첫번째 인덱스를 저장
        print(V, end=" ") # V 출력 (이 때 처음엔 1 출력하고 아래 FOR문 돌면서 2,3,4 출력됨)
        # 1부터 N까지 (N = 4 -> 1 ~ 4)
        for i in range(1, N + 1): 
            if not visited_BFS[i] and graph[V][i]: # visited_BFS의 i를 방문하지 않고 -> (False 일 때), graph의 V와 i에 연결이 되어있는지
                q.append(i) # q에 i를 추가
                visited_BFS[i] = True # i를 방문으로 표시



def dfs(V):
    visited_DFS[V] = True  
    print(V, end=" ")
    for i in range(1, N + 1):
        if not visited_DFS[i] and graph[V][i]: # visited_BFS의 i를 방문하지 않고 -> (False 일 때), graph의 V와 i에 연결이 되어있는지
            dfs(i) # 깊이 탐색
            # N이 4일 때
            # 1일 때 dfs(2) 불러오기, 2 출력
            # 2일 때 dfs(4) 불러오기, 4 출력
            # 4일 때 dfs(3) 불러오기, 3 력
            # 3, 4, 2, 1 순서대로 종료
            





N, M, V = map(int, input().split()) # N: 정점의 개수, M: 간선의 개수, V: 정점의 번호
graph = [[False] * (N + 1) for _ in range(N + 1)] 

for _ in range(M):  
    x, y= map(int, input().split())
    graph[x][y] = True
    graph[y][x] = True

# 문제 예시 
# 1 2
# 1 3
# 1 4
# 2 4
# 3 4
# graph = [
#    [False, False, False, False, False], # 0번째 안 씀
#    [False, False, True, True, True], # 1과 연결되어 있는 노드
#    [False, True, False, False, True], #2와 연결되어 있는 노드
#    [False, True, False, False, True], # 3과 연결되어 있는 노드
#    [False, True, True, True, False] # 4와 연결되어 있는 노드
#]


visited_DFS = [False] * (N + 1) # 1부터 시작이니까 +1 해주기
visited_BFS = [False] * (N + 1)

bfs(V)
print()
dfs(V)
